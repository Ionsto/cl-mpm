(in-package :cl-mpm/damage)
(defmethod cl-mpm::update-sim ((sim mpm-sim-damage))
  (declare (cl-mpm::mpm-sim-usf sim))
  (with-slots ((mesh cl-mpm::mesh)
               (mps  cl-mpm::mps)
               (bcs  cl-mpm::bcs)
               (bcs-force cl-mpm::bcs-force)
               (bcs-force-list cl-mpm::bcs-force-list)
               (dt cl-mpm::dt)
               (mass-filter cl-mpm::mass-filter)
               (ghost-factor cl-mpm::ghost-factor)
               (split cl-mpm::allow-mp-split)
               (enable-damage cl-mpm::enable-damage)
               (nonlocal-damage cl-mpm::nonlocal-damage)
               (remove-damage cl-mpm::allow-mp-damage-removal)
               (fbar cl-mpm::enable-fbar)
               (update-type cl-mpm::update-type)
               (vel-algo cl-mpm::velocity-algorithm)
               (damping cl-mpm::damping-factor)
               (time cl-mpm::time)
               )
                sim
    (declare (type double-float mass-filter))
                (progn
                    (cl-mpm::reset-grid mesh)
                    (when (> (length mps) 0)
                      (cl-mpm::p2g mesh mps)
                      (when (> mass-filter 0d0)
                        (cl-mpm::filter-grid mesh (cl-mpm::sim-mass-filter sim)))

                      (cl-mpm::filter-cells sim)
                      (cl-mpm::update-node-kinematics sim)
                      (cl-mpm::apply-bcs mesh bcs dt)
                      (cl-mpm::update-nodes sim)
                      (cl-mpm::update-cells sim)

                      (cl-mpm::update-stress mesh mps dt fbar)
                      (cl-mpm/damage::calculate-damage sim dt)
                      ;; ;Map forces onto nodes
                      (cl-mpm::p2g-force sim)
                      (loop for bcs-f in bcs-force-list
                            do (cl-mpm::apply-bcs mesh bcs-f dt))
                      (cl-mpm::update-node-forces sim)

                      ;; (when ghost-factor
                      ;;   (cl-mpm/ghost::apply-ghost sim ghost-factor))
                      ;; ;Reapply velocity BCs

                      (cl-mpm::reset-node-displacement sim)
                      (cl-mpm::update-nodes sim)

                      (cl-mpm::apply-bcs mesh bcs dt)
                      (cl-mpm::update-dynamic-stats sim)
                      (cl-mpm::g2p mesh mps dt damping vel-algo)
                      (cl-mpm::new-loadstep sim)
                      (when remove-damage
                        (cl-mpm::remove-material-damaged sim))
                      (incf time dt))
                    )))
(defmethod cl-mpm::update-sim ((sim mpm-sim-usl-damage))
  (declare (cl-mpm::mpm-sim-usl sim))
  (with-slots ((mesh cl-mpm::mesh)
               (mps  cl-mpm::mps)
               (bcs  cl-mpm::bcs)
               (bcs-force cl-mpm::bcs-force)
               (bcs-force-list cl-mpm::bcs-force-list)
               (dt cl-mpm::dt)
               (mass-filter cl-mpm::mass-filter)
               (split cl-mpm::allow-mp-split)
               (enable-damage cl-mpm::enable-damage)
               (nonlocal-damage cl-mpm::nonlocal-damage)
               (remove-damage cl-mpm::allow-mp-damage-removal)
               (fbar cl-mpm::enable-fbar)
               (vel-algo cl-mpm::velocity-algorithm)
               (damping cl-mpm::damping-factor)
               (time cl-mpm::time))
      sim
    (declare (type double-float mass-filter))
    (progn
      ;; (cl-mpm::check-single-mps sim)
      (cl-mpm::reset-grid mesh)
      (cl-mpm::p2g mesh mps)
      ;;Do optional mass filter
      (when (> mass-filter 0d0)
        (cl-mpm::filter-grid mesh (cl-mpm::sim-mass-filter sim)))
      (cl-mpm::update-node-kinematics sim)
      (cl-mpm::apply-bcs mesh bcs dt)
      ;; Map forces onto nodes
      (cl-mpm::p2g-force sim)
      (loop for bcs-f in bcs-force-list
            do (cl-mpm::apply-bcs mesh bcs-f dt))
      (cl-mpm::update-node-forces sim)
      ;; Reapply velocity BCs
      (cl-mpm::apply-bcs mesh bcs dt)
      (cl-mpm::reset-node-displacement sim)
      (cl-mpm::update-nodes sim)
      (cl-mpm::g2p mesh mps dt damping vel-algo)
      ;;Update stress last
      (cl-mpm::reset-grid-velocity mesh)
      (cl-mpm::p2g mesh mps)
      ;; (cl-mpm::check-single-mps sim)
      ;;Do optional mass filter
      (when (> mass-filter 0d0)
        (cl-mpm::filter-grid-velocity mesh (cl-mpm::sim-mass-filter sim)))
      (cl-mpm::update-node-kinematics sim)
      (cl-mpm::reset-node-displacement sim)
      (cl-mpm::update-nodes sim)
      (cl-mpm::apply-bcs mesh bcs dt)
      (cl-mpm::update-cells sim)
      (cl-mpm::update-dynamic-stats sim)

      (cl-mpm::update-stress mesh mps dt fbar)
      (cl-mpm/damage::calculate-damage sim dt)
      (cl-mpm::new-loadstep sim)
      (incf time dt)
      )))
